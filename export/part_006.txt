            var sourceText = SourceText.From(File.ReadAllText(docPath));
            var documentInfo = DocumentInfo.Create(
                DocumentId.CreateNewId(project.Id),
                Path.GetFileName(docPath),
                loader: TextLoader.From(TextAndVersion.Create(sourceText, VersionStamp.Create())),
                filePath: docPath
            );

            workspace.AddDocument(documentInfo);
        }
    }

    private static List<string> GetProjectPathsFromSolution(string solutionPath)
    {
        var projectPaths = new List<string>();
        var solutionDir = Path.GetDirectoryName(solutionPath)!;

        foreach (var line in File.ReadAllLines(solutionPath))
        {
            if (line.Trim().StartsWith("Project(") && line.Contains(".csproj"))
            {
                var parts = line.Split(',');
                if (parts.Length > 1)
                {
                    var relativePath = parts[1].Trim().Trim('"');
                    var fullPath = Path.Combine(solutionDir, relativePath);
                    projectPaths.Add(fullPath);
                }
            }
        }

        return projectPaths;
    }

    private static ClassAndField GetClassAndFieldName(SemanticModel model, MemberAccessExpressionSyntax usage)
    {
        var fieldName = usage.Name.ToString();
        var expression = usage.Expression; // This is 'address' in 'address.ZipCode'
        var typeInfo = model.GetTypeInfo(expression);
        var type = typeInfo.Type;
        return new ClassAndField(type is null ? "" : type.Name, fieldName);
    }
}

-- Analyze/Analyze.csproj --
ï»¿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Tasks.Core"/>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp"/>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces"/>
    <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild"/>
    <PackageReference Include="Microsoft.Extensions.Configuration"/>
    <PackageReference Include="Microsoft.Extensions.Configuration.FileExtensions"/>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json"/>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection"/>
    <PackageReference Include="Microsoft.Extensions.Logging"/>
    <PackageReference Include="Microsoft.Extensions.Logging.Console"/>
    <PackageReference Include="Spectre.Console"/>
  </ItemGroup>

  <ItemGroup>
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

</Project>

-- Analyze/ClassAndField.cs --
namespace Analyze;

public record ClassAndField(string ClassName, string FieldName) : IComparable<ClassAndField>
{
    public int CompareTo(ClassAndField? other)
    {
        if (ReferenceEquals(this, other))
        {
            return 0;
        }

        if (other is null)
        {
            return 1;
        }

        var classNameComparison = string.Compare(ClassName, other.ClassName, StringComparison.Ordinal);
        if (classNameComparison != 0)
        {
            return classNameComparison;
        }

        return string.Compare(FieldName, other.FieldName, StringComparison.Ordinal);
    }
}

-- Analyze/ConsoleUi.cs --
using Microsoft.Extensions.Logging;
using Spectre.Console;

namespace Analyze;

public class ConsoleUi(ILogger logger)
{
    public enum PropertyUsageFormat
    {
        TotalUsages,
        UsagesPerFile
    }

    public void DisplayWelcome()
    {
        AnsiConsole.MarkupLine("[bold blue]Welcome to the DTO Usage Analyzer![/]");
        AnsiConsole.MarkupLine("This tool will help you analyze the usage of DTO classes in your solution.");
    }

    public Type? PromptForClassSelection(IEnumerable<Type> dtoClasses)
    {
        var classes = dtoClasses.ToList();
        if (!classes.Any())
        {
            AnsiConsole.MarkupLine("[red]No DTO classes found in the Dto project.[/]");
            return null;
        }

        var selectedClass = AnsiConsole.Prompt(
            new SelectionPrompt<Type>()
                .Title("Select a DTO class to analyze:")
                .AddChoices(classes)
                .UseConverter(t => t.Name));

        return selectedClass;
    }

    public void DisplayAnalysisStart(Type selectedClass)
    {
        AnsiConsole.MarkupLine($"[green]Analyzing usage of {selectedClass.Name}...[/]");
    }

    public PropertyUsageFormat PromptForPropertyUsageFormat()
    {
        var choice = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("How would you like to display property usage?")
                .AddChoices("Show usages per file", "Show only total usages"));
        return choice == "Show usages per file" ? PropertyUsageFormat.UsagesPerFile : PropertyUsageFormat.TotalUsages;
    }

    public bool PromptToSkipTestProjects()
    {
        return AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Skip test project analysis?")
                .AddChoices("Yes", "No")) == "Yes";
    }
    
    public string FindSolutionFile()
    {
        var currentDir = Directory.GetCurrentDirectory();
        var solutionFiles = Directory.GetFiles(currentDir, "*.sln");

        if (solutionFiles.Length == 1)
        {
            return solutionFiles[0];
        }

        if (solutionFiles.Length > 1)
        {
            var selectedSolution = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("Multiple solution files found. Please select one:")
                    .AddChoices(solutionFiles.Select(f =>
                        Path.GetFileName(f) ?? throw new InvalidOperationException("Solution file name is null"))));
            return solutionFiles.First(f => Path.GetFileName(f) == selectedSolution);
